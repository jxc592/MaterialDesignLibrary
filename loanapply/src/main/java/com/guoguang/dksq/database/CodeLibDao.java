package com.guoguang.dksq.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CODE_LIB.
*/
public class CodeLibDao extends AbstractDao<CodeLib, Long> {

    public static final String TABLENAME = "CODE_LIB";

    /**
     * Properties of entity CodeLib.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CODENO = new Property(1, String.class, "CODENO", false, "CODENO");
        public final static Property ITEMNO = new Property(2, String.class, "ITEMNO", false, "ITEMNO");
        public final static Property ITEMNAME = new Property(3, String.class, "ITEMNAME", false, "ITEMNAME");
        public final static Property BANKNO = new Property(4, String.class, "BANKNO", false, "BANKNO");
        public final static Property SORTNO = new Property(5, String.class, "SORTNO", false, "SORTNO");
        public final static Property ISINUSE = new Property(6, String.class, "ISINUSE", false, "ISINUSE");
        public final static Property ITEMDESCRIBE = new Property(7, String.class, "ITEMDESCRIBE", false, "ITEMDESCRIBE");
        public final static Property ITEMATTRIBUTE = new Property(8, String.class, "ITEMATTRIBUTE", false, "ITEMATTRIBUTE");
        public final static Property RELATIVECODE = new Property(9, String.class, "RELATIVECODE", false, "RELATIVECODE");
        public final static Property ATTRIBUTE1 = new Property(10, String.class, "ATTRIBUTE1", false, "ATTRIBUTE1");
        public final static Property ATTRIBUTE2 = new Property(11, String.class, "ATTRIBUTE2", false, "ATTRIBUTE2");
        public final static Property ATTRIBUTE3 = new Property(12, String.class, "ATTRIBUTE3", false, "ATTRIBUTE3");
        public final static Property ATTRIBUTE4 = new Property(13, String.class, "ATTRIBUTE4", false, "ATTRIBUTE4");
        public final static Property ATTRIBUTE5 = new Property(14, String.class, "ATTRIBUTE5", false, "ATTRIBUTE5");
        public final static Property ATTRIBUTE6 = new Property(15, String.class, "ATTRIBUTE6", false, "ATTRIBUTE6");
        public final static Property ATTRIBUTE7 = new Property(16, String.class, "ATTRIBUTE7", false, "ATTRIBUTE7");
        public final static Property ATTRIBUTE8 = new Property(17, String.class, "ATTRIBUTE8", false, "ATTRIBUTE8");
        public final static Property INPUTUSER = new Property(18, String.class, "INPUTUSER", false, "INPUTUSER");
        public final static Property INPUTORG = new Property(19, String.class, "INPUTORG", false, "INPUTORG");
        public final static Property INPUTTIME = new Property(20, String.class, "INPUTTIME", false, "INPUTTIME");
        public final static Property UPDATEUSER = new Property(21, String.class, "UPDATEUSER", false, "UPDATEUSER");
        public final static Property UPDATETIME = new Property(22, String.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property REMARK = new Property(23, String.class, "REMARK", false, "REMARK");
        public final static Property HELPTEXT = new Property(24, String.class, "HELPTEXT", false, "HELPTEXT");
    };


    public CodeLibDao(DaoConfig config) {
        super(config);
    }
    
    public CodeLibDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CODE_LIB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CODENO' TEXT," + // 1: CODENO
                "'ITEMNO' TEXT," + // 2: ITEMNO
                "'ITEMNAME' TEXT," + // 3: ITEMNAME
                "'BANKNO' TEXT," + // 4: BANKNO
                "'SORTNO' TEXT," + // 5: SORTNO
                "'ISINUSE' TEXT," + // 6: ISINUSE
                "'ITEMDESCRIBE' TEXT," + // 7: ITEMDESCRIBE
                "'ITEMATTRIBUTE' TEXT," + // 8: ITEMATTRIBUTE
                "'RELATIVECODE' TEXT," + // 9: RELATIVECODE
                "'ATTRIBUTE1' TEXT," + // 10: ATTRIBUTE1
                "'ATTRIBUTE2' TEXT," + // 11: ATTRIBUTE2
                "'ATTRIBUTE3' TEXT," + // 12: ATTRIBUTE3
                "'ATTRIBUTE4' TEXT," + // 13: ATTRIBUTE4
                "'ATTRIBUTE5' TEXT," + // 14: ATTRIBUTE5
                "'ATTRIBUTE6' TEXT," + // 15: ATTRIBUTE6
                "'ATTRIBUTE7' TEXT," + // 16: ATTRIBUTE7
                "'ATTRIBUTE8' TEXT," + // 17: ATTRIBUTE8
                "'INPUTUSER' TEXT," + // 18: INPUTUSER
                "'INPUTORG' TEXT," + // 19: INPUTORG
                "'INPUTTIME' TEXT," + // 20: INPUTTIME
                "'UPDATEUSER' TEXT," + // 21: UPDATEUSER
                "'UPDATETIME' TEXT," + // 22: UPDATETIME
                "'REMARK' TEXT," + // 23: REMARK
                "'HELPTEXT' TEXT);"); // 24: HELPTEXT
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CODE_LIB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CodeLib entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CODENO = entity.getCODENO();
        if (CODENO != null) {
            stmt.bindString(2, CODENO);
        }
 
        String ITEMNO = entity.getITEMNO();
        if (ITEMNO != null) {
            stmt.bindString(3, ITEMNO);
        }
 
        String ITEMNAME = entity.getITEMNAME();
        if (ITEMNAME != null) {
            stmt.bindString(4, ITEMNAME);
        }
 
        String BANKNO = entity.getBANKNO();
        if (BANKNO != null) {
            stmt.bindString(5, BANKNO);
        }
 
        String SORTNO = entity.getSORTNO();
        if (SORTNO != null) {
            stmt.bindString(6, SORTNO);
        }
 
        String ISINUSE = entity.getISINUSE();
        if (ISINUSE != null) {
            stmt.bindString(7, ISINUSE);
        }
 
        String ITEMDESCRIBE = entity.getITEMDESCRIBE();
        if (ITEMDESCRIBE != null) {
            stmt.bindString(8, ITEMDESCRIBE);
        }
 
        String ITEMATTRIBUTE = entity.getITEMATTRIBUTE();
        if (ITEMATTRIBUTE != null) {
            stmt.bindString(9, ITEMATTRIBUTE);
        }
 
        String RELATIVECODE = entity.getRELATIVECODE();
        if (RELATIVECODE != null) {
            stmt.bindString(10, RELATIVECODE);
        }
 
        String ATTRIBUTE1 = entity.getATTRIBUTE1();
        if (ATTRIBUTE1 != null) {
            stmt.bindString(11, ATTRIBUTE1);
        }
 
        String ATTRIBUTE2 = entity.getATTRIBUTE2();
        if (ATTRIBUTE2 != null) {
            stmt.bindString(12, ATTRIBUTE2);
        }
 
        String ATTRIBUTE3 = entity.getATTRIBUTE3();
        if (ATTRIBUTE3 != null) {
            stmt.bindString(13, ATTRIBUTE3);
        }
 
        String ATTRIBUTE4 = entity.getATTRIBUTE4();
        if (ATTRIBUTE4 != null) {
            stmt.bindString(14, ATTRIBUTE4);
        }
 
        String ATTRIBUTE5 = entity.getATTRIBUTE5();
        if (ATTRIBUTE5 != null) {
            stmt.bindString(15, ATTRIBUTE5);
        }
 
        String ATTRIBUTE6 = entity.getATTRIBUTE6();
        if (ATTRIBUTE6 != null) {
            stmt.bindString(16, ATTRIBUTE6);
        }
 
        String ATTRIBUTE7 = entity.getATTRIBUTE7();
        if (ATTRIBUTE7 != null) {
            stmt.bindString(17, ATTRIBUTE7);
        }
 
        String ATTRIBUTE8 = entity.getATTRIBUTE8();
        if (ATTRIBUTE8 != null) {
            stmt.bindString(18, ATTRIBUTE8);
        }
 
        String INPUTUSER = entity.getINPUTUSER();
        if (INPUTUSER != null) {
            stmt.bindString(19, INPUTUSER);
        }
 
        String INPUTORG = entity.getINPUTORG();
        if (INPUTORG != null) {
            stmt.bindString(20, INPUTORG);
        }
 
        String INPUTTIME = entity.getINPUTTIME();
        if (INPUTTIME != null) {
            stmt.bindString(21, INPUTTIME);
        }
 
        String UPDATEUSER = entity.getUPDATEUSER();
        if (UPDATEUSER != null) {
            stmt.bindString(22, UPDATEUSER);
        }
 
        String UPDATETIME = entity.getUPDATETIME();
        if (UPDATETIME != null) {
            stmt.bindString(23, UPDATETIME);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(24, REMARK);
        }
 
        String HELPTEXT = entity.getHELPTEXT();
        if (HELPTEXT != null) {
            stmt.bindString(25, HELPTEXT);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CodeLib readEntity(Cursor cursor, int offset) {
        CodeLib entity = new CodeLib( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CODENO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ITEMNO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ITEMNAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BANKNO
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SORTNO
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ISINUSE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ITEMDESCRIBE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ITEMATTRIBUTE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RELATIVECODE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ATTRIBUTE1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ATTRIBUTE2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ATTRIBUTE3
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ATTRIBUTE4
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ATTRIBUTE5
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ATTRIBUTE6
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ATTRIBUTE7
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ATTRIBUTE8
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // INPUTUSER
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // INPUTORG
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // INPUTTIME
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // UPDATEUSER
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // UPDATETIME
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // REMARK
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // HELPTEXT
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CodeLib entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCODENO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setITEMNO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setITEMNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBANKNO(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSORTNO(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setISINUSE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setITEMDESCRIBE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setITEMATTRIBUTE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRELATIVECODE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setATTRIBUTE1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setATTRIBUTE2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setATTRIBUTE3(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setATTRIBUTE4(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setATTRIBUTE5(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setATTRIBUTE6(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setATTRIBUTE7(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setATTRIBUTE8(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setINPUTUSER(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setINPUTORG(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setINPUTTIME(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUPDATEUSER(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUPDATETIME(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setREMARK(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHELPTEXT(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CodeLib entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CodeLib entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

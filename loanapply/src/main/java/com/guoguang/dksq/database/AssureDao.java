package com.guoguang.dksq.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ASSURE.
*/
public class AssureDao extends AbstractDao<Assure, Long> {

    public static final String TABLENAME = "ASSURE";

    /**
     * Properties of entity Assure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SeqNo = new Property(1, String.class, "SeqNo", false, "SEQ_NO");
        public final static Property SerialNo = new Property(2, String.class, "SerialNo", false, "SERIAL_NO");
        public final static Property CustomerID = new Property(3, String.class, "CustomerID", false, "CUSTOMER_ID");
        public final static Property ContractType = new Property(4, String.class, "ContractType", false, "CONTRACT_TYPE");
        public final static Property GuarantyType = new Property(5, String.class, "GuarantyType", false, "GUARANTY_TYPE");
        public final static Property ContractStatus = new Property(6, String.class, "ContractStatus", false, "CONTRACT_STATUS");
        public final static Property GuarantorID = new Property(7, String.class, "GuarantorID", false, "GUARANTOR_ID");
        public final static Property CertType = new Property(8, String.class, "CertType", false, "CERT_TYPE");
        public final static Property CertID = new Property(9, String.class, "CertID", false, "CERT_ID");
        public final static Property GuarantorName = new Property(10, String.class, "GuarantorName", false, "GUARANTOR_NAME");
        public final static Property LoanCardNo = new Property(11, String.class, "LoanCardNo", false, "LOAN_CARD_NO");
        public final static Property GuarantyCurrency = new Property(12, String.class, "GuarantyCurrency", false, "GUARANTY_CURRENCY");
        public final static Property GuarantyValue = new Property(13, String.class, "GuarantyValue", false, "GUARANTY_VALUE");
        public final static Property GuarantyInfo = new Property(14, String.class, "GuarantyInfo", false, "GUARANTY_INFO");
        public final static Property OtherDescribe = new Property(15, String.class, "OtherDescribe", false, "OTHER_DESCRIBE");
        public final static Property Remark = new Property(16, String.class, "Remark", false, "REMARK");
        public final static Property InputUserID = new Property(17, String.class, "InputUserID", false, "INPUT_USER_ID");
        public final static Property InputUserName = new Property(18, String.class, "InputUserName", false, "INPUT_USER_NAME");
        public final static Property InputOrgID = new Property(19, String.class, "InputOrgID", false, "INPUT_ORG_ID");
        public final static Property InputOrgName = new Property(20, String.class, "InputOrgName", false, "INPUT_ORG_NAME");
        public final static Property InputDate = new Property(21, String.class, "InputDate", false, "INPUT_DATE");
        public final static Property UpdateDate = new Property(22, String.class, "UpdateDate", false, "UPDATE_DATE");
    };


    public AssureDao(DaoConfig config) {
        super(config);
    }
    
    public AssureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ASSURE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SEQ_NO' TEXT," + // 1: SeqNo
                "'SERIAL_NO' TEXT," + // 2: SerialNo
                "'CUSTOMER_ID' TEXT," + // 3: CustomerID
                "'CONTRACT_TYPE' TEXT," + // 4: ContractType
                "'GUARANTY_TYPE' TEXT," + // 5: GuarantyType
                "'CONTRACT_STATUS' TEXT," + // 6: ContractStatus
                "'GUARANTOR_ID' TEXT," + // 7: GuarantorID
                "'CERT_TYPE' TEXT," + // 8: CertType
                "'CERT_ID' TEXT," + // 9: CertID
                "'GUARANTOR_NAME' TEXT," + // 10: GuarantorName
                "'LOAN_CARD_NO' TEXT," + // 11: LoanCardNo
                "'GUARANTY_CURRENCY' TEXT," + // 12: GuarantyCurrency
                "'GUARANTY_VALUE' TEXT," + // 13: GuarantyValue
                "'GUARANTY_INFO' TEXT," + // 14: GuarantyInfo
                "'OTHER_DESCRIBE' TEXT," + // 15: OtherDescribe
                "'REMARK' TEXT," + // 16: Remark
                "'INPUT_USER_ID' TEXT," + // 17: InputUserID
                "'INPUT_USER_NAME' TEXT," + // 18: InputUserName
                "'INPUT_ORG_ID' TEXT," + // 19: InputOrgID
                "'INPUT_ORG_NAME' TEXT," + // 20: InputOrgName
                "'INPUT_DATE' TEXT," + // 21: InputDate
                "'UPDATE_DATE' TEXT);"); // 22: UpdateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ASSURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Assure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SeqNo = entity.getSeqNo();
        if (SeqNo != null) {
            stmt.bindString(2, SeqNo);
        }
 
        String SerialNo = entity.getSerialNo();
        if (SerialNo != null) {
            stmt.bindString(3, SerialNo);
        }
 
        String CustomerID = entity.getCustomerID();
        if (CustomerID != null) {
            stmt.bindString(4, CustomerID);
        }
 
        String ContractType = entity.getContractType();
        if (ContractType != null) {
            stmt.bindString(5, ContractType);
        }
 
        String GuarantyType = entity.getGuarantyType();
        if (GuarantyType != null) {
            stmt.bindString(6, GuarantyType);
        }
 
        String ContractStatus = entity.getContractStatus();
        if (ContractStatus != null) {
            stmt.bindString(7, ContractStatus);
        }
 
        String GuarantorID = entity.getGuarantorID();
        if (GuarantorID != null) {
            stmt.bindString(8, GuarantorID);
        }
 
        String CertType = entity.getCertType();
        if (CertType != null) {
            stmt.bindString(9, CertType);
        }
 
        String CertID = entity.getCertID();
        if (CertID != null) {
            stmt.bindString(10, CertID);
        }
 
        String GuarantorName = entity.getGuarantorName();
        if (GuarantorName != null) {
            stmt.bindString(11, GuarantorName);
        }
 
        String LoanCardNo = entity.getLoanCardNo();
        if (LoanCardNo != null) {
            stmt.bindString(12, LoanCardNo);
        }
 
        String GuarantyCurrency = entity.getGuarantyCurrency();
        if (GuarantyCurrency != null) {
            stmt.bindString(13, GuarantyCurrency);
        }
 
        String GuarantyValue = entity.getGuarantyValue();
        if (GuarantyValue != null) {
            stmt.bindString(14, GuarantyValue);
        }
 
        String GuarantyInfo = entity.getGuarantyInfo();
        if (GuarantyInfo != null) {
            stmt.bindString(15, GuarantyInfo);
        }
 
        String OtherDescribe = entity.getOtherDescribe();
        if (OtherDescribe != null) {
            stmt.bindString(16, OtherDescribe);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(17, Remark);
        }
 
        String InputUserID = entity.getInputUserID();
        if (InputUserID != null) {
            stmt.bindString(18, InputUserID);
        }
 
        String InputUserName = entity.getInputUserName();
        if (InputUserName != null) {
            stmt.bindString(19, InputUserName);
        }
 
        String InputOrgID = entity.getInputOrgID();
        if (InputOrgID != null) {
            stmt.bindString(20, InputOrgID);
        }
 
        String InputOrgName = entity.getInputOrgName();
        if (InputOrgName != null) {
            stmt.bindString(21, InputOrgName);
        }
 
        String InputDate = entity.getInputDate();
        if (InputDate != null) {
            stmt.bindString(22, InputDate);
        }
 
        String UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindString(23, UpdateDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Assure readEntity(Cursor cursor, int offset) {
        Assure entity = new Assure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SeqNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SerialNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CustomerID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ContractType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // GuarantyType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ContractStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // GuarantorID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CertType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CertID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // GuarantorName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // LoanCardNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // GuarantyCurrency
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // GuarantyValue
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // GuarantyInfo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // OtherDescribe
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Remark
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // InputUserID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // InputUserName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // InputOrgID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // InputOrgName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // InputDate
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // UpdateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Assure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeqNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerialNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContractType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGuarantyType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContractStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGuarantorID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCertType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCertID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGuarantorName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLoanCardNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGuarantyCurrency(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGuarantyValue(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGuarantyInfo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOtherDescribe(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemark(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInputUserID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInputUserName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInputOrgID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInputOrgName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInputDate(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdateDate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Assure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Assure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

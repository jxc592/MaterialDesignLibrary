package com.guoguang.dksq.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHOTO_ENTITY.
*/
public class PhotoEntityDao extends AbstractDao<PhotoEntity, Long> {

    public static final String TABLENAME = "PHOTO_ENTITY";

    /**
     * Properties of entity PhotoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsBp = new Property(1, Boolean.class, "isBp", false, "IS_BP");
        public final static Property SeqNo = new Property(2, String.class, "SeqNo", false, "SEQ_NO");
        public final static Property PhotoTypeCode = new Property(3, String.class, "photoTypeCode", false, "PHOTO_TYPE_CODE");
        public final static Property PhotoTypeName = new Property(4, String.class, "photoTypeName", false, "PHOTO_TYPE_NAME");
        public final static Property PhotoName = new Property(5, String.class, "photoName", false, "PHOTO_NAME");
        public final static Property PhotoPath = new Property(6, String.class, "photoPath", false, "PHOTO_PATH");
        public final static Property CusNumId = new Property(7, String.class, "cusNumId", false, "CUS_NUM_ID");
        public final static Property Position = new Property(8, String.class, "position", false, "POSITION");
    };


    public PhotoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHOTO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IS_BP' INTEGER," + // 1: isBp
                "'SEQ_NO' TEXT," + // 2: SeqNo
                "'PHOTO_TYPE_CODE' TEXT," + // 3: photoTypeCode
                "'PHOTO_TYPE_NAME' TEXT," + // 4: photoTypeName
                "'PHOTO_NAME' TEXT," + // 5: photoName
                "'PHOTO_PATH' TEXT," + // 6: photoPath
                "'CUS_NUM_ID' TEXT," + // 7: cusNumId
                "'POSITION' TEXT);"); // 8: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHOTO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhotoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isBp = entity.getIsBp();
        if (isBp != null) {
            stmt.bindLong(2, isBp ? 1l: 0l);
        }
 
        String SeqNo = entity.getSeqNo();
        if (SeqNo != null) {
            stmt.bindString(3, SeqNo);
        }
 
        String photoTypeCode = entity.getPhotoTypeCode();
        if (photoTypeCode != null) {
            stmt.bindString(4, photoTypeCode);
        }
 
        String photoTypeName = entity.getPhotoTypeName();
        if (photoTypeName != null) {
            stmt.bindString(5, photoTypeName);
        }
 
        String photoName = entity.getPhotoName();
        if (photoName != null) {
            stmt.bindString(6, photoName);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(7, photoPath);
        }
 
        String cusNumId = entity.getCusNumId();
        if (cusNumId != null) {
            stmt.bindString(8, cusNumId);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhotoEntity readEntity(Cursor cursor, int offset) {
        PhotoEntity entity = new PhotoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isBp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SeqNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photoTypeCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photoTypeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photoName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photoPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cusNumId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // position
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhotoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsBp(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSeqNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotoTypeCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhotoTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhotoName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhotoPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCusNumId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhotoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhotoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

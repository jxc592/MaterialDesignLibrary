package com.guoguang.dksq.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOAN_RECORD.
*/
public class LoanRecordDao extends AbstractDao<LoanRecord, Long> {

    public static final String TABLENAME = "LOAN_RECORD";

    /**
     * Properties of entity LoanRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SeqNo = new Property(1, String.class, "SeqNo", false, "SEQ_NO");
        public final static Property CustomerName = new Property(2, String.class, "CustomerName", false, "CUSTOMER_NAME");
        public final static Property CustomerID = new Property(3, String.class, "CustomerID", false, "CUSTOMER_ID");
        public final static Property BusinessType = new Property(4, String.class, "BusinessType", false, "BUSINESS_TYPE");
        public final static Property ContractFlag = new Property(5, String.class, "ContractFlag", false, "CONTRACT_FLAG");
        public final static Property UpdateTime = new Property(6, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property InputUserID = new Property(7, String.class, "InputUserID", false, "INPUT_USER_ID");
        public final static Property InputUserName = new Property(8, String.class, "InputUserName", false, "INPUT_USER_NAME");
    };


    public LoanRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LoanRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOAN_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SEQ_NO' TEXT," + // 1: SeqNo
                "'CUSTOMER_NAME' TEXT," + // 2: CustomerName
                "'CUSTOMER_ID' TEXT," + // 3: CustomerID
                "'BUSINESS_TYPE' TEXT," + // 4: BusinessType
                "'CONTRACT_FLAG' TEXT," + // 5: ContractFlag
                "'UPDATE_TIME' TEXT," + // 6: UpdateTime
                "'INPUT_USER_ID' TEXT," + // 7: InputUserID
                "'INPUT_USER_NAME' TEXT);"); // 8: InputUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOAN_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoanRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SeqNo = entity.getSeqNo();
        if (SeqNo != null) {
            stmt.bindString(2, SeqNo);
        }
 
        String CustomerName = entity.getCustomerName();
        if (CustomerName != null) {
            stmt.bindString(3, CustomerName);
        }
 
        String CustomerID = entity.getCustomerID();
        if (CustomerID != null) {
            stmt.bindString(4, CustomerID);
        }
 
        String BusinessType = entity.getBusinessType();
        if (BusinessType != null) {
            stmt.bindString(5, BusinessType);
        }
 
        String ContractFlag = entity.getContractFlag();
        if (ContractFlag != null) {
            stmt.bindString(6, ContractFlag);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(7, UpdateTime);
        }
 
        String InputUserID = entity.getInputUserID();
        if (InputUserID != null) {
            stmt.bindString(8, InputUserID);
        }
 
        String InputUserName = entity.getInputUserName();
        if (InputUserName != null) {
            stmt.bindString(9, InputUserName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoanRecord readEntity(Cursor cursor, int offset) {
        LoanRecord entity = new LoanRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SeqNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CustomerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CustomerID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BusinessType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ContractFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UpdateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // InputUserID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // InputUserName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoanRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeqNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBusinessType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContractFlag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInputUserID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInputUserName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoanRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoanRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
